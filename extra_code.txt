public void show(String ID, JsonObject cam, LinearLayout layout, ArrayList tag_list)
    {
        FreeTextSingle temp_FreeTextSingle = null;
        FreeTextMulti temp_FreeTextMulti = null;
        MultipleChoiceSingle temp_MultipleChoiceSingle = null;

        JsonArray array = cam.get(Question_Array).getAsJsonArray();
        for (int i=0;i<array.size();i++)
        {
            Gson gson = new Gson();
            JsonElement temp_element = array.get(i);
            Base_Question temp_basequestion = gson.fromJson(temp_element,Base_Question.class);

            if (temp_basequestion.getQuestionID().equals(ID))
            {
                if (temp_basequestion.getQuestionType().equals(FreeTextSingle))
                {
                    temp_FreeTextSingle = gson.fromJson(temp_element,FreeTextSingle.class);
                    display(temp_FreeTextSingle, layout, tag_list);
                }

                else if (temp_basequestion.getQuestionType().equals(FreeTextMulti))
                {
                    temp_FreeTextMulti = gson.fromJson(temp_element, FreeTextMulti.class);
                    display(temp_FreeTextMulti, layout, tag_list);

                }

                else if (temp_basequestion.getQuestionType().equals(MultipleChoiceSingle))
                {
                    temp_MultipleChoiceSingle = gson.fromJson(temp_element, MultipleChoiceSingle.class);
                    display(temp_MultipleChoiceSingle, layout, tag_list);
                }

            }
        }
    }

    public void common_display(Base_Question obj, final LinearLayout layout)
    {
        System.out.println(obj.getQuestionID() + " " + obj.getQuestionType() + " " + Arrays.toString(obj.getQuestionLabel()));
        String[] quesLabel = obj.getQuestionLabel();
        TextView tv = new TextView(getApplicationContext());
        tv.setText(quesLabel[0]);
        tv.setTextColor(Color.BLACK);
        layout.addView(tv);

        if (quesLabel[1]!= null)
        {
            final String image_URL = quesLabel[1];
            System.out.println("Image URL is " + image_URL);
            final Bitmap[] bmp = new Bitmap[1];
            final ImageView imageview = new ImageView(this);

            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... params) {
                    try {
                        InputStream in = new URL(image_URL).openStream();
                        bmp[0] = BitmapFactory.decodeStream(in);
                    } catch (Exception e) { /*log error*/ }
                    return null;
                }
                @Override
                protected void onPostExecute(Void result) {
                    if (bmp[0] != null)
                    {
                        imageview.setImageBitmap(bmp[0]);
                        layout.addView(imageview);
                    }
                }
            }.execute();
        }
    }

    public void display(FreeTextSingle obj, final LinearLayout layout, ArrayList tag_list)
    {
        common_display(obj, layout);

        final EditText edittext = new EditText(this);
        edittext.setText("");
        edittext.setTextColor(Color.BLACK);
        edittext.requestFocus();
        String tag = obj.getQuestionID() + "_";
        edittext.setTag(tag);
        tag_list.add(tag);
        layout.addView(edittext);
    }

    public void display(FreeTextMulti obj, final LinearLayout layout, ArrayList tag_list)
    {
        common_display(obj, layout);

        String[] subcomponent = obj.getComponent();
        int size = subcomponent.length;
        TextView[] textview = new TextView[size];
        EditText[] edittext = new EditText[size];
        for (int i=0;i<subcomponent.length;i++)
        {
            textview[i] = new TextView(getApplicationContext());
            textview[i].setText(subcomponent[i]);
            textview[i].setTextColor(Color.BLACK);
            layout.addView(textview[i]);

            edittext[i] = new EditText(getApplicationContext());
            edittext[i].setText("");
            edittext[i].setTextColor(Color.BLACK);
            if (i==0) edittext[i].requestFocus();
            String tag = obj.getQuestionID() + "_" + String.valueOf(i);
            edittext[i].setTag(tag);
            tag_list.add(tag);
            layout.addView(edittext[i]);
        }
    }

    public void display(MultipleChoiceSingle obj, final LinearLayout layout, ArrayList tag_list)
    {
        common_display(obj, layout);

        String[] subcomponent = obj.getComponent();
        int size = subcomponent.length;
        RadioGroup radiogroup = new RadioGroup(getApplicationContext());
        String tag = obj.getQuestionID() + "_";
        radiogroup.setTag(tag);
        tag_list.add(tag);
        for (int i=0;i<size;i++)
        {
            RadioButton radioButton = new RadioButton(getApplicationContext());
            radioButton.setText(subcomponent[i]);
            radioButton.setTextColor(Color.BLACK);
            radiogroup.addView(radioButton);
        }
        layout.addView(radiogroup);
    }